name: 'Deploy ArgoCD'
description: 'Deploy on Kubernetes with ArgoCD'
author: hello@cloudposse.com
branding:
  icon: 'cpu'
  color: 'white'
inputs:
  cluster:
    description: Cluster name
    required: true
  aws-region:
    description: AWS region
    required: false
    default: us-east-1
  helmfile-path:
    description: The path where lives the helmfile.
    required: false
    default: deploy
  helmfile:
    description: Helmfile name
    required: false
    default: helmfile.yaml
  operation:
    description: Operation with helmfiles. (valid options - `deploy`, `destroy`)
    required: true
    default: deploy
  environment:
    description: Helmfile environment
    required: false
    default: preview
  gitref-sha:
    description: Git SHA
    required: false
    default: ''
  namespace:
    description: Kubernetes namespace
    required: true
  image:
    description: Docker image
    required: true
  image-tag:
    description: Docker image tag
    required: true
  debug:
    description: Debug mode
    default: 'false'
    required: false
  release_label_name:
    description: The name of the label used to describe the helm release
    default: "release"
    required: false
outputs:
  webapp-url:
    description: "Web Application url"
    value: "https://example.com"
runs:
  using: "composite"
  steps:
    - name: 'Setup yq'
      uses: dcarbone/install-yq-action@v1.0.1
      with:
        version: v4.28.1
        download-compressed: true
        force: true

    - name: Setup helmfile
      uses: mamezou-tech/setup-helmfile@v1.2.0
      with:
        helmfile-version: v0.148.1
        helm-version: v3.10.2
        install-kubectl: false

    - name: AWS Get caller identity
      uses: docker://segment/chamber:2.11.0
      with:
        args: --verbose export platform/${{ inputs.cluster }}/${{ inputs.environment }} --format yaml --output-file ./platform.yaml

    - name: YQ Platform settings
      shell: bash
      run: |
        yq --exit-status --no-colors --inplace eval '{"platform": .}' ./platform.yaml

    - name: Helmfile render
      shell: bash
      run: |
        helmfile --namespace ${{ inputs.namespace }} \
                --environment ${{ inputs.environment }} \
                --file ${{ inputs.helmfile-path}}/${{ inputs.helmfile }} template --help


