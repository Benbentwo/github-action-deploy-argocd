---
# Source: monochart/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: example-app-monochart
  labels:
    app: monochart
    chart: monochart-0.22.0
    heritage: "Helm"
    release: "example-app"
spec:
  type: ClusterIP
  ports:
  - targetPort: default
    port: 80
    protocol: TCP
    name: default
  selector:
    app: monochart
    release: example-app
    serve: "true"
---
# Source: monochart/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: example-app-monochart
  labels:
    app: monochart
    chart: monochart-0.22.0
    heritage: "Helm"
    release: "example-app"
spec:
  replicas: 2
  selector:
    matchLabels:
      app: monochart
      release: example-app
  strategy:
    rollingUpdate:
      maxUnavailable: 1
    type: RollingUpdate
  revisionHistoryLimit: 10
  template:
    metadata:
      name: example-app-monochart
      annotations:
        checksum/config: e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855
        checksum/secret: e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855
      labels:
        app: monochart
        release: "example-app"
        serve: "true"
    spec:
      containers:
      - name: example-app
        image: cloudposse/example-app:0.1.0
        imagePullPolicy: Always
        
        envFrom:
        ports:
          - name: default
            containerPort: 8080
            protocol: TCP
        volumeMounts:
        - mountPath: "/data"
          name: storage
        
        livenessProbe:
          failureThreshold: 2
          httpGet:
            path: /healthz
            port: default
            scheme: HTTP
          initialDelaySeconds: 3
          periodSeconds: 3
          successThreshold: 1
          timeoutSeconds: 3
        readinessProbe:
          failureThreshold: 2
          httpGet:
            path: /healthz
            port: default
            scheme: HTTP
          initialDelaySeconds: 3
          periodSeconds: 3
          successThreshold: 1
          timeoutSeconds: 3
        resources:
          limits:
            cpu: 100m
            memory: 10Mi
          requests:
            cpu: 100m
            memory: 10Mi
      imagePullSecrets:
      volumes:
      - name: storage
        emptyDir: {}
---
# Source: monochart/templates/ingress.yaml
apiVersion: networking.k8s.io/v1beta1
kind: Ingress
metadata:
  annotations:
    alb.ingress.kubernetes.io/actions.ssl-redirect: '{"RedirectConfig":{"Port":"443","Protocol":"HTTPS","StatusCode":"HTTP_301"},"Type":"redirect"}'
    alb.ingress.kubernetes.io/group.name: default
    alb.ingress.kubernetes.io/listen-ports: '[{"HTTP": 80}, {"HTTPS": 443}]'
    alb.ingress.kubernetes.io/scheme: internet-facing
    alb.ingress.kubernetes.io/ssl-redirect: "443"
    alb.ingress.kubernetes.io/target-type: ip
    external-dns.alpha.kubernetes.io/hostname: example-app.example.com
    external-dns.alpha.kubernetes.io/target: example.com
    kubernetes.io/ingress.class: alb
    outputs.platform.cloudposse.com/webapp-url: https://example-app.example.com/dashboard
  labels:
    app: monochart
    chart: monochart-0.22.0
    heritage: "Helm"
    release: "example-app"
    ingressName: default
  name: example-app-monochart-default
spec:
  rules:
    - host: example-app.example.com
      http:
        paths:
          - path: /*
            backend:
              serviceName: example-app-monochart
              servicePort: default

